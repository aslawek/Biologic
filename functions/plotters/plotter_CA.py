import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.use('Qt5Agg'); #mpl.use('TkAgg')

def plotter_CA_simple(data, filename):
    ax1 = plt.figure().add_subplot()
    ax2 = ax1.twinx()
    ax1.plot(data['time/s'], data['control/V'], color="blue")
    ax2.plot(data['time/s'], data['I/mA'], color="red")
    ax1.set_title(filename.replace("/", " ").split()[-1])
    ax1.set_xlabel("time / s", fontsize=12)
    ax1.set_ylabel("control / V", fontsize=12)
    ax2.set_ylabel("current / mA", fontsize=12)
    #ax1.legend()

def plotter_CA_points(data, filename):
    ax1 = plt.figure().add_subplot()
    ax2 = ax1.twinx()
    ax1.plot(data['time/s'], data['control/V'], marker='o', color="blue", label=f'test')
    ax2.plot(data['time/s'], data['I/mA'], marker='o', color="red", label=f'test')
    ax1.set_title(filename.replace("/", " ").split()[-1])
    ax1.set_xlabel("time / s", fontsize=12)
    ax1.set_ylabel("control / V", fontsize=12)
    ax2.set_ylabel("current / mA", fontsize=12)
    ax1.legend()

def plotter_CA_Autolab(data, filename):
    ax1 = plt.figure().add_subplot()
    ax2 = ax1.twinx()
    ax1.plot(data['Time (s)'], data['WE(1).Potential (V)'], color="blue")
    ax2.plot(data['Time (s)'], data['WE(1).Current (A)'], color="red")
    ax1.set_title(filename.replace("/", " ").split()[-1])
    ax1.set_xlabel("time / s", fontsize=12)
    ax1.set_ylabel("control / V", fontsize=12)
    ax2.set_ylabel("current / mA", fontsize=12)
    #ax1.legend()

def plotter_CA_Autolab_assign_states(data, filename, V_bias, V_set, V_reset, V_read, V_err):
    data['color'] = data['state'].replace({'bias': 'grey', 'set': 'green', 'reset': 'red', 'read': 'cyan', 'unknown': 'purple'})
    ax1 = plt.figure().add_subplot()
    # add rectangles for V_bias, V_set, V_reset, V_read +/- V_err visualization. .Rectangle((x, y), width, height, ...)
    rect_bias = mpl.patches.Rectangle((data['Time (s)'].min(), V_bias - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="grey")
    rect_read = mpl.patches.Rectangle((data['Time (s)'].min(), V_read - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="cyan")
    rect_set = mpl.patches.Rectangle((data['Time (s)'].min(), V_set - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="green")
    rect_reset = mpl.patches.Rectangle((data['Time (s)'].min(), V_reset - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="red")
    plt.gca().add_patch(rect_bias)
    plt.gca().add_patch(rect_read)
    plt.gca().add_patch(rect_set)
    plt.gca().add_patch(rect_reset)
    # ... plotting data
    ax2 = ax1.twinx()
    ax1.scatter(data['Time (s)'], data['WE(1).Potential (V)'], marker='.', color=data['color'], lw=2)
    ax1.plot(data['Time (s)'], data['WE(1).Potential (V)'], '--', color='gray')
    ax2.plot(data['Time (s)'], data['WE(1).Current (A)'], color="red")
    ax1.set_title(filename.replace("/", " ").split()[-1])
    ax1.set_xlabel("time / s", fontsize=12)
    ax1.set_ylabel("control / V", fontsize=12)
    # Labels
    ax1.text(0.01, 0.03, 'bias', color='grey', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.08, 'set', color='green', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.13, 'reset', color='red', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.18, 'read', color='cyan', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.23, 'unknown', color='purple', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    data.drop('color', axis=1, inplace=True)

def plotter_CA_Autolab_assign_read_cycles(data, filename, V_bias, V_set, V_reset, V_read, V_err):
    data['color'] = data['state'].replace({'bias': 'grey', 'set': 'green', 'reset': 'red', 'read': 'cyan', 'unknown': 'purple'})
    ax1 = plt.figure().add_subplot()
    # add rectangles for V_bias, V_set, V_reset, V_read +/- V_err visualization. .Rectangle((x, y), width, height, ...)
    rect_bias = mpl.patches.Rectangle((data['Time (s)'].min(), V_bias - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="grey")
    rect_read = mpl.patches.Rectangle((data['Time (s)'].min(), V_read - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="cyan")
    rect_set = mpl.patches.Rectangle((data['Time (s)'].min(), V_set - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="green")
    rect_reset = mpl.patches.Rectangle((data['Time (s)'].min(), V_reset - V_err), data['Time (s)'].max() - data['Time (s)'].min(), 2 * V_err, alpha=0.25, facecolor="red")
    plt.gca().add_patch(rect_bias)
    plt.gca().add_patch(rect_read)
    plt.gca().add_patch(rect_set)
    plt.gca().add_patch(rect_reset)
    # ... plotting data
    ax2 = ax1.twinx()
    ax1.scatter(data['Time (s)'], data['WE(1).Potential (V)'], marker='.', color=data['color'], lw=2)
    ax1.plot(data['Time (s)'], data['WE(1).Potential (V)'], '--', color='gray')
    ax2.plot(data['Time (s)'], data['read_cycle'], color="blue")
    ax1.set_title(filename.replace("/", " ").split()[-1])
    ax1.set_xlabel("time / s", fontsize=12)
    ax1.set_ylabel("control / V", fontsize=12)
    # Labels
    ax1.text(0.01, 0.03, 'bias', color='grey', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.08, 'set', color='green', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.13, 'reset', color='red', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.18, 'read', color='cyan', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    ax1.text(0.01, 0.23, 'unknown', color='purple', fontsize=14, rotation='horizontal', transform=ax1.transAxes)
    data.drop('color', axis=1, inplace=True)